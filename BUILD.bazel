load("@pip_base_deps//:requirements.bzl", pip_base_deps = "all_requirements")
load("@pip_test_deps//:requirements.bzl", pip_test_deps = "all_requirements")
load("@rules_uv//uv:pip.bzl", "pip_compile")

# Prefer aspect_rules_py's py_binary over rules_python's, but leave the following
# commented out so it's easy to switch back: aspect_rules_py's py_binary uses a 'venv' binary
# that depends on a newer glibc than is available on RHEL7.
# load("@rules_python//python:defs.bzl", "py_binary", "py_test")
load("@aspect_rules_py//py:defs.bzl", "py_binary", "py_test")
load("@rules_python//python/entry_points:py_console_script_binary.bzl", "py_console_script_binary")
load("@rules_oci//oci:defs.bzl", "oci_tarball")
load("//:py_layer.bzl", "py_oci_image")

filegroup(
    name = "templates",
    srcs = glob(["templates/*.jinja"]),
)

py_binary(
    name = "app",
    srcs = ["app.py"],
    data = [":templates"],
    deps = pip_base_deps,
)

py_test(
    name = "test_app",
    size = "small",
    srcs = ["test_app.py"],
    deps = [":app"] + pip_base_deps + pip_test_deps,
)

[
    py_console_script_binary(
        name = i,
        pkg = "@pip_base_deps//{}".format(i),
        deps = [":app"],
    )
    for i in ("flask", "hypercorn")
]

[
    pip_compile(
        name = "compile_{}_requirements".format(i),
        args = ["--no-build"],
        requirements_in = "requirements.{}.in".format(i),
        requirements_txt = "requirements.{}.txt".format(i),
    )
    for i in ("base", "test")
]

exports_files([".ruff.toml"])

py_oci_image(
    name = "oci_image",
    base = "@distroless_base",
    binary = ":app",
    entrypoint = ["/app"],
)
